from collections import OrderedDict

class LRUCache:
    def __init__(self, capacity):
        self.cache = OrderedDict()
        self.capacity = capacity

    def refer(self, page):
        if page in self.cache:
            self.cache.move_to_end(page)
        else:
            if len(self.cache) >= self.capacity:
                self.cache.popitem(last=False)
            self.cache[page] = None

def lru_page_replacement(pages, capacity):
    lru_cache = LRUCache(capacity)
    page_faults = 0

    for page in pages:
        if page not in lru_cache.cache:
            print(f"Page {page} is loaded into the memory.")
            lru_cache.refer(page)
            page_faults += 1
        else:
            print(f"Page {page} is already in the memory.")

    print(f"\nTotal Page Faults: {page_faults}")

if __name__ == "__main__":
    pages = list(map(int, input("Enter page references separated by space: ").split()))
    capacity = int(input("Enter memory capacity: "))
    lru_page_replacement(pages, capacity)
